{"version":3,"sources":["Services/Service.ts","QuestionCard/Question_Card.tsx","client/client.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Service","totalQuestion","level","a","axios","get","res","data","results","quiz","map","QuestionObj","question","answer","correct_answer","option","array","incorrect_answers","concat","sort","Math","random","QuestionCard","callback","useState","selectedAns","setSelectedAns","handelSelected","evt","target","value","className","onSubmit","opt","ind","name","type","required","checked","onChange","Allnotification","publicVapidKey","console","log","navigator","serviceWorker","register","scope","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","subscription","post","method","body","JSON","stringify","headers","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","catch","err","error","App","setQuiz","currentStep","setCurrentStep","score","setScore","showResult","setShowResult","useEffect","FatchData","e","userAns","preventDefault","CurrentQuestion","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.488372e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { quiztype,Questiontype } from \"../QuizType/quiz_type\";\r\n\r\nlet shafalArray =(array: any[] )=>\r\n  [...array].sort(()=> Math.random() - 0.5)  \r\n\r\n\r\n\r\nexport const Service =  async (totalQuestion: number, level: string): Promise<quiztype[]>  =>{\r\n\r\n\r\n    let {data: res} = await axios.get(`https://opentdb.com/api.php?amount=${totalQuestion}&difficulty=${level}&type=multiple`);\r\n\r\n    let data = await res.results\r\n    \r\nconst quiz:quiztype[] = data.map((QuestionObj: Questiontype)=>{\r\n\r\n\r\n    return {\r\n      question: QuestionObj.question,\r\n      answer: QuestionObj.correct_answer,\r\n      correct_answer: QuestionObj.correct_answer,\r\n      option: shafalArray(QuestionObj.incorrect_answers.concat(QuestionObj.correct_answer))\r\n    }\r\n})\r\n\r\nreturn quiz\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { QuestionPropstype } from \"./../QuizType/quiz_type\";\r\n\r\n const QuestionCard: React.FC<QuestionPropstype> = ({question , option, callback}) =>{\r\n\r\n\r\nlet [selectedAns, setSelectedAns] = useState(\"\");\r\n\r\nconst handelSelected = (evt: any)=>{\r\n\r\n\r\n    setSelectedAns(evt.target.value)\r\n}\r\n\r\n    return(\r\n        <div className=\"question_container\">\r\n\r\n<div className=\"question\">\r\n<h4>{question}</h4>\r\n</div>\r\n\r\n<form onSubmit={(evt: React.FormEvent<EventTarget>)=>callback(evt, selectedAns)} className=\"form_container\">\r\n\r\n    {\r\noption.map((opt: string, ind: number)=>{\r\n\r\n\r\n    return ( \r\n        <div key={ind}>\r\n<label className=\"radio\">\r\n\r\n<input name=\"opt\"\r\n type=\"radio\"\r\n  required \r\n  value={opt}\r\n  checked={selectedAns === opt}\r\n  onChange={handelSelected}\r\n  />\r\n  {opt}\r\n</label>\r\n            \r\n        </div>\r\n    )\r\n})\r\n    \r\n\r\n}\r\n<input type=\"submit\" className=\"submit\"/>\r\n</form>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default QuestionCard","import React from \"react\";\nimport axios from \"axios\";\n\nexport function  Allnotification(){\n\n\n\nconst publicVapidKey : string = \"BI__ik-fD5l0QUr4XNmGqdPhMeFppBORhMRiVYd3tRurCQddSaU3qZQlEPT9NOgZzhxm7hY380dNV1YaXauNeS0\";\n\nif (\"serviceWorker\" in navigator) {\n    send().catch(err => {\n      console.error(err)\n    });\n    }\n\n\n    //  Register SW, Register Push, Send Push\nasync function send() {\n// Register Service Worker\nconsole.log(\"Registering service worker...\");\nconst register = await navigator.serviceWorker.register(\"/worker.js\", {\n  scope: \"/\"\n});\n\nconsole.log(\"Service Worker Registered...\");\n\n// Register Push\nconsole.log(\"Registering Push...\");\nconst subscription = await register.pushManager.subscribe({\n  userVisibleOnly: true,\n  applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n});\nconsole.log(\"Push Registered...\");\n\n// Send Push Notification\nconsole.log(\"Sending Push...\");\nawait axios.post(\"/subscribe\", {\n  method: \"POST\",\n  body: JSON.stringify(subscription),\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\nconsole.log(\"Push Sent...\");\n}\n\n\nfunction urlBase64ToUint8Array(base64String: any) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, \"+\")\n      .replace(/_/g, \"/\");\n    \n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    \n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n    }\n}","import React,{useEffect, useState} from 'react';\nimport {Service}from \"./Services/Service\";\nimport { quiztype } from \"./QuizType/quiz_type\";\nimport  QuestionCard  from \"./QuestionCard/Question_Card\";\nimport {  Allnotification} from \"./client/client\";\nimport './App.css';\n\n\n\nfunction App() {\n\n  let [quiz, setQuiz] = useState<quiztype[]>([])\n  let [currentStep, setCurrentStep] = useState(0)\n  let [score, setScore] = useState(0);\nlet [showResult, setShowResult] = useState(false)\n\n  useEffect(() => {\n\nasync function FatchData() {\n  \n const question: quiztype[]= await Service(10, \"easy\");\n\n setQuiz(question)\n\n Allnotification()\n}\nFatchData();\n   \n  }, [])\n\n  const handelStep = (e: React.FormEvent<EventTarget>, userAns: string) =>{\n\ne.preventDefault();\n\n const CurrentQuestion: quiztype = quiz[currentStep];\n\n console.log(\" correct answer :  \"  + CurrentQuestion.correct_answer + \"  --user selected Answer:  \" + userAns)\n \n if(userAns === CurrentQuestion.correct_answer ){\n\n  setScore(++score)\n }\nif(currentStep !== quiz.length-1)\n\n  setCurrentStep(++currentStep);\n\nelse{\n  setShowResult(true)\n}\n\n  }\nif(!quiz.length){\n  return <h2>Loading...</h2>\n}\n\nif(showResult){\n\n  return (<div className=\"question_container  reasult_container\">\n\n<h1>Result</h1>\n<p>\n  your final score \n\n  <b> {score} out of {quiz.length} </b>\n</p>\n\n\n  </div>)\n}\n\n  return (\n    <div className=\"App\">\n      <h1>Quiz App</h1>\n     \n\n      <QuestionCard \n      option={quiz[currentStep].option}\n      question={quiz[currentStep].question}\n      callback={handelStep}\n\n      \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}