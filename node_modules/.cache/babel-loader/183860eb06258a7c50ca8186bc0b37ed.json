{"ast":null,"code":"import axios from \"axios\";\nexport function Allnotification() {\n  const publicVapidKey = \"BI__ik-fD5l0QUr4XNmGqdPhMeFppBORhMRiVYd3tRurCQddSaU3qZQlEPT9NOgZzhxm7hY380dNV1YaXauNeS0\";\n\n  if (\"serviceWorker\" in navigator) {\n    send().catch(err => {\n      console.error(err);\n    });\n  } //  Register SW, Register Push, Send Push\n\n\n  async function send() {\n    // Register Service Worker\n    console.log(\"Registering service worker...\");\n    const register = await navigator.serviceWorker.register(\"/worker.tsx\", {\n      scope: \"/\"\n    });\n    console.log(\"Service Worker Registered...\"); // Register Push\n\n    console.log(\"Registering Push...\");\n    const subscription = await register.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n    });\n    console.log(\"Push Registered...\"); // Send Push Notification\n\n    console.log(\"Sending Push...\");\n    await axios.post(\"/subscribe\", {\n      method: \"POST\",\n      body: JSON.stringify(subscription),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n    console.log(\"Push Sent...\");\n  }\n\n  function urlBase64ToUint8Array(base64String) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  }\n}\n_c = Allnotification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Allnotification\");","map":{"version":3,"sources":["/home/hadi/reactprojects/quizapp/Quizeapp/src/client/client.tsx"],"names":["axios","Allnotification","publicVapidKey","navigator","send","catch","err","console","error","log","register","serviceWorker","scope","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","post","method","body","JSON","stringify","headers","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAAUC,eAAV,GAA2B;AAIlC,QAAMC,cAAuB,GAAG,yFAAhC;;AAEA,MAAI,mBAAmBC,SAAvB,EAAkC;AAC9BC,IAAAA,IAAI,GAAGC,KAAP,CAAaC,GAAG,IAAI;AAClBC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAFD;AAGC,GAV6B,CAa9B;;;AACJ,iBAAeF,IAAf,GAAsB;AACtB;AACAG,IAAAA,OAAO,CAACE,GAAR,CAAY,+BAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,aAAV,CAAwBD,QAAxB,CAAiC,aAAjC,EAAgD;AACrEE,MAAAA,KAAK,EAAE;AAD8D,KAAhD,CAAvB;AAIAL,IAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ,EAPsB,CAStB;;AACAF,IAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACA,UAAMI,YAAY,GAAG,MAAMH,QAAQ,CAACI,WAAT,CAAqBC,SAArB,CAA+B;AACxDC,MAAAA,eAAe,EAAE,IADuC;AAExDC,MAAAA,oBAAoB,EAAEC,qBAAqB,CAAChB,cAAD;AAFa,KAA/B,CAA3B;AAIAK,IAAAA,OAAO,CAACE,GAAR,CAAY,oBAAZ,EAfsB,CAiBtB;;AACAF,IAAAA,OAAO,CAACE,GAAR,CAAY,iBAAZ;AACA,UAAMT,KAAK,CAACmB,IAAN,CAAW,YAAX,EAAyB;AAC7BC,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf,CAFuB;AAG7BW,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHoB,KAAzB,CAAN;AAOAjB,IAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ;AACC;;AAGD,WAASS,qBAAT,CAA+BO,YAA/B,EAAkD;AAC9C,UAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAIF,YAAY,CAACG,MAAb,GAAsB,CAA3B,IAAgC,CAA3C,CAAhB;AACA,UAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,EACZI,OADY,CACJ,KADI,EACG,GADH,EAEZA,OAFY,CAEJ,IAFI,EAEE,GAFF,CAAf;AAIA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,UAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB;;AAEA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACH,MAA5B,EAAoC,EAAEQ,CAAtC,EAAyC;AACvCF,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,WAAOF,WAAP;AACC;AACJ;KA1DgBjC,e","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nexport function  Allnotification(){\n\n\n\nconst publicVapidKey : string = \"BI__ik-fD5l0QUr4XNmGqdPhMeFppBORhMRiVYd3tRurCQddSaU3qZQlEPT9NOgZzhxm7hY380dNV1YaXauNeS0\";\n\nif (\"serviceWorker\" in navigator) {\n    send().catch(err => {\n      console.error(err)\n    });\n    }\n\n\n    //  Register SW, Register Push, Send Push\nasync function send() {\n// Register Service Worker\nconsole.log(\"Registering service worker...\");\nconst register = await navigator.serviceWorker.register(\"/worker.tsx\", {\n  scope: \"/\"\n});\n\nconsole.log(\"Service Worker Registered...\");\n\n// Register Push\nconsole.log(\"Registering Push...\");\nconst subscription = await register.pushManager.subscribe({\n  userVisibleOnly: true,\n  applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n});\nconsole.log(\"Push Registered...\");\n\n// Send Push Notification\nconsole.log(\"Sending Push...\");\nawait axios.post(\"/subscribe\", {\n  method: \"POST\",\n  body: JSON.stringify(subscription),\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\nconsole.log(\"Push Sent...\");\n}\n\n\nfunction urlBase64ToUint8Array(base64String: any) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, \"+\")\n      .replace(/_/g, \"/\");\n    \n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    \n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n    }\n}"]},"metadata":{},"sourceType":"module"}