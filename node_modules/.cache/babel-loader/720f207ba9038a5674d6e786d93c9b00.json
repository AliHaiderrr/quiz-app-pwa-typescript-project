{"ast":null,"code":"import _regeneratorRuntime from\"/home/hadi/reactprojects/quizapp/Quizeapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hadi/reactprojects/quizapp/Quizeapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";export function Allnotification(){var publicVapidKey=\"BI__ik-fD5l0QUr4XNmGqdPhMeFppBORhMRiVYd3tRurCQddSaU3qZQlEPT9NOgZzhxm7hY380dNV1YaXauNeS0\";if(\"serviceWorker\"in navigator){send().catch(function(err){console.error(err);});}//  Register SW, Register Push, Send Push\nfunction send(){return _send.apply(this,arguments);}function _send(){_send=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var register,subscription;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Register Service Worker\nconsole.log(\"Registering service worker...\");_context.next=3;return navigator.serviceWorker.register(\"/worker.tsx\",{scope:\"/\"});case 3:register=_context.sent;console.log(\"Service Worker Registered...\");// Register Push\nconsole.log(\"Registering Push...\");_context.next=8;return register.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:urlBase64ToUint8Array(publicVapidKey)});case 8:subscription=_context.sent;console.log(\"Push Registered...\");// Send Push Notification\nconsole.log(\"Sending Push...\");_context.next=13;return axios.post(\"/subscribe\",{method:\"POST\",body:JSON.stringify(subscription),headers:{\"content-type\":\"application/json\"}});case 13:console.log(\"Push Sent...\");case 14:case\"end\":return _context.stop();}}},_callee);}));return _send.apply(this,arguments);}function urlBase64ToUint8Array(base64String){var padding=\"=\".repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/\\-/g,\"+\").replace(/_/g,\"/\");var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;}}","map":{"version":3,"sources":["/home/hadi/reactprojects/quizapp/Quizeapp/src/client/client.tsx"],"names":["axios","Allnotification","publicVapidKey","navigator","send","catch","err","console","error","log","serviceWorker","register","scope","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","subscription","post","method","body","JSON","stringify","headers","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":"6TACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,SAAUC,CAAAA,eAAV,EAA2B,CAIlC,GAAMC,CAAAA,cAAuB,CAAG,yFAAhC,CAEA,GAAI,iBAAmBC,CAAAA,SAAvB,CAAkC,CAC9BC,IAAI,GAAGC,KAAP,CAAa,SAAAC,GAAG,CAAI,CAClBC,OAAO,CAACC,KAAR,CAAcF,GAAd,EACD,CAFD,EAGC,CAGD;AAb8B,QAcnBF,CAAAA,IAdmB,sHAclC,6JACA;AACAG,OAAO,CAACE,GAAR,CAAY,+BAAZ,EAFA,sBAGuBN,CAAAA,SAAS,CAACO,aAAV,CAAwBC,QAAxB,CAAiC,aAAjC,CAAgD,CACrEC,KAAK,CAAE,GAD8D,CAAhD,CAHvB,QAGMD,QAHN,eAOAJ,OAAO,CAACE,GAAR,CAAY,8BAAZ,EAEA;AACAF,OAAO,CAACE,GAAR,CAAY,qBAAZ,EAVA,sBAW2BE,CAAAA,QAAQ,CAACE,WAAT,CAAqBC,SAArB,CAA+B,CACxDC,eAAe,CAAE,IADuC,CAExDC,oBAAoB,CAAEC,qBAAqB,CAACf,cAAD,CAFa,CAA/B,CAX3B,QAWMgB,YAXN,eAeAX,OAAO,CAACE,GAAR,CAAY,oBAAZ,EAEA;AACAF,OAAO,CAACE,GAAR,CAAY,iBAAZ,EAlBA,uBAmBMT,CAAAA,KAAK,CAACmB,IAAN,CAAW,YAAX,CAAyB,CAC7BC,MAAM,CAAE,MADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,YAAf,CAFuB,CAG7BM,OAAO,CAAE,CACP,eAAgB,kBADT,CAHoB,CAAzB,CAnBN,SA0BAjB,OAAO,CAACE,GAAR,CAAY,cAAZ,EA1BA,uDAdkC,uCA4ClC,QAASQ,CAAAA,qBAAT,CAA+BQ,YAA/B,CAAkD,CAC9C,GAAMC,CAAAA,OAAO,CAAG,IAAIC,MAAJ,CAAW,CAAC,EAAIF,YAAY,CAACG,MAAb,CAAsB,CAA3B,EAAgC,CAA3C,CAAhB,CACA,GAAMC,CAAAA,MAAM,CAAG,CAACJ,YAAY,CAAGC,OAAhB,EACZI,OADY,CACJ,KADI,CACG,GADH,EAEZA,OAFY,CAEJ,IAFI,CAEE,GAFF,CAAf,CAIA,GAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB,CACA,GAAMK,CAAAA,WAAW,CAAG,GAAIC,CAAAA,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB,CAEA,IAAK,GAAIQ,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,OAAO,CAACH,MAA5B,CAAoC,EAAEQ,CAAtC,CAAyC,CACvCF,WAAW,CAACE,CAAD,CAAX,CAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB,CACD,CACD,MAAOF,CAAAA,WAAP,CACC,CACJ","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nexport function  Allnotification(){\n\n\n\nconst publicVapidKey : string = \"BI__ik-fD5l0QUr4XNmGqdPhMeFppBORhMRiVYd3tRurCQddSaU3qZQlEPT9NOgZzhxm7hY380dNV1YaXauNeS0\";\n\nif (\"serviceWorker\" in navigator) {\n    send().catch(err => {\n      console.error(err)\n    });\n    }\n\n\n    //  Register SW, Register Push, Send Push\nasync function send() {\n// Register Service Worker\nconsole.log(\"Registering service worker...\");\nconst register = await navigator.serviceWorker.register(\"/worker.tsx\", {\n  scope: \"/\"\n});\n\nconsole.log(\"Service Worker Registered...\");\n\n// Register Push\nconsole.log(\"Registering Push...\");\nconst subscription = await register.pushManager.subscribe({\n  userVisibleOnly: true,\n  applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n});\nconsole.log(\"Push Registered...\");\n\n// Send Push Notification\nconsole.log(\"Sending Push...\");\nawait axios.post(\"/subscribe\", {\n  method: \"POST\",\n  body: JSON.stringify(subscription),\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\nconsole.log(\"Push Sent...\");\n}\n\n\nfunction urlBase64ToUint8Array(base64String: any) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, \"+\")\n      .replace(/_/g, \"/\");\n    \n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    \n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n    }\n}"]},"metadata":{},"sourceType":"module"}