{"ast":null,"code":"import axios from \"axios\";\n\nlet shafalArray = array => [...array].sort(() => Math.random() - 0.5);\n\nexport const Service = async (totalQuestion, level) => {\n  let {\n    data: res\n  } = await axios.get(`https://opentdb.com/api.php?amount=${totalQuestion}&difficulty=${level}&type=multiple`);\n  let data = await res.results;\n  const quiz = data.map(QuestionObj => {\n    return {\n      question: QuestionObj.question,\n      answer: QuestionObj.correct_answer,\n      correct_answer: QuestionObj.correct_answer,\n      option: shafalArray(QuestionObj.incorrect_answers.concat(QuestionObj.correct_answer))\n    };\n  });\n  return quiz;\n};\n_c = Service;\n\nvar _c;\n\n$RefreshReg$(_c, \"Service\");","map":{"version":3,"sources":["/home/hadi/reactprojects/quizapp/Quizeapp/src/Services/Service.ts"],"names":["axios","shafalArray","array","sort","Math","random","Service","totalQuestion","level","data","res","get","results","quiz","map","QuestionObj","question","answer","correct_answer","option","incorrect_answers","concat"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,IAAIC,WAAW,GAAGC,KAAD,IACf,CAAC,GAAGA,KAAJ,EAAWC,IAAX,CAAgB,MAAKC,IAAI,CAACC,MAAL,KAAgB,GAArC,CADF;;AAKA,OAAO,MAAMC,OAAO,GAAI,OAAOC,aAAP,EAA8BC,KAA9B,KAAqE;AAGzF,MAAI;AAACC,IAAAA,IAAI,EAAEC;AAAP,MAAc,MAAMV,KAAK,CAACW,GAAN,CAAW,sCAAqCJ,aAAc,eAAcC,KAAM,gBAAlF,CAAxB;AAEA,MAAIC,IAAI,GAAG,MAAMC,GAAG,CAACE,OAArB;AAEJ,QAAMC,IAAe,GAAGJ,IAAI,CAACK,GAAL,CAAUC,WAAD,IAA6B;AAG1D,WAAO;AACLC,MAAAA,QAAQ,EAAED,WAAW,CAACC,QADjB;AAELC,MAAAA,MAAM,EAAEF,WAAW,CAACG,cAFf;AAGLA,MAAAA,cAAc,EAAEH,WAAW,CAACG,cAHvB;AAILC,MAAAA,MAAM,EAAElB,WAAW,CAACc,WAAW,CAACK,iBAAZ,CAA8BC,MAA9B,CAAqCN,WAAW,CAACG,cAAjD,CAAD;AAJd,KAAP;AAMH,GATuB,CAAxB;AAWA,SAAOL,IAAP;AAEC,CApBM;KAAMP,O","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { quiztype,Questiontype } from \"../QuizType/quiz_type\";\r\n\r\nlet shafalArray =(array: any[] )=>\r\n  [...array].sort(()=> Math.random() - 0.5)  \r\n\r\n\r\n\r\nexport const Service =  async (totalQuestion: number, level: string): Promise<quiztype[]>  =>{\r\n\r\n\r\n    let {data: res} = await axios.get(`https://opentdb.com/api.php?amount=${totalQuestion}&difficulty=${level}&type=multiple`);\r\n\r\n    let data = await res.results\r\n    \r\nconst quiz:quiztype[] = data.map((QuestionObj: Questiontype)=>{\r\n\r\n\r\n    return {\r\n      question: QuestionObj.question,\r\n      answer: QuestionObj.correct_answer,\r\n      correct_answer: QuestionObj.correct_answer,\r\n      option: shafalArray(QuestionObj.incorrect_answers.concat(QuestionObj.correct_answer))\r\n    }\r\n})\r\n\r\nreturn quiz\r\n\r\n}"]},"metadata":{},"sourceType":"module"}