{"ast":null,"code":"import _regeneratorRuntime from\"/home/hadi/reactprojects/quizapp/Quizeapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hadi/reactprojects/quizapp/Quizeapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/hadi/reactprojects/quizapp/Quizeapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import axios from\"axios\";var shafalArray=function shafalArray(array){return _toConsumableArray(array).sort(function(){return Math.random()-0.5;});};export var Service=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(totalQuestion,level){var _yield$axios$get,res,data,quiz;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"https://opentdb.com/api.php?amount=\".concat(totalQuestion,\"&difficulty=\").concat(level,\"&type=multiple\"));case 2:_yield$axios$get=_context.sent;res=_yield$axios$get.data;_context.next=6;return res.results;case 6:data=_context.sent;quiz=data.map(function(QuestionObj){return{question:QuestionObj.question,answer:QuestionObj.correct_answer,correct_answer:QuestionObj.correct_answer,option:shafalArray(QuestionObj.incorrect_answers.concat(QuestionObj.correct_answer))};});return _context.abrupt(\"return\",quiz);case 9:case\"end\":return _context.stop();}}},_callee);}));return function Service(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/hadi/reactprojects/quizapp/Quizeapp/src/Services/Service.ts"],"names":["axios","shafalArray","array","sort","Math","random","Service","totalQuestion","level","get","res","data","results","quiz","map","QuestionObj","question","answer","correct_answer","option","incorrect_answers","concat"],"mappings":"qeACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAIA,GAAIC,CAAAA,WAAW,CAAE,QAAbA,CAAAA,WAAa,CAACC,KAAD,QACf,oBAAIA,KAAJ,EAAWC,IAAX,CAAgB,iBAAKC,CAAAA,IAAI,CAACC,MAAL,GAAgB,GAArB,EAAhB,CADe,EAAjB,CAKA,MAAO,IAAMC,CAAAA,OAAO,0FAAI,iBAAOC,aAAP,CAA8BC,KAA9B,2KAGIR,CAAAA,KAAK,CAACS,GAAN,8CAAgDF,aAAhD,wBAA4EC,KAA5E,mBAHJ,uCAGTE,GAHS,kBAGfC,IAHe,uBAKHD,CAAAA,GAAG,CAACE,OALD,QAKhBD,IALgB,eAOlBE,IAPkB,CAOAF,IAAI,CAACG,GAAL,CAAS,SAACC,WAAD,CAA6B,CAG1D,MAAO,CACLC,QAAQ,CAAED,WAAW,CAACC,QADjB,CAELC,MAAM,CAAEF,WAAW,CAACG,cAFf,CAGLA,cAAc,CAAEH,WAAW,CAACG,cAHvB,CAILC,MAAM,CAAElB,WAAW,CAACc,WAAW,CAACK,iBAAZ,CAA8BC,MAA9B,CAAqCN,WAAW,CAACG,cAAjD,CAAD,CAJd,CAAP,CAMH,CATuB,CAPA,iCAkBjBL,IAlBiB,wDAAJ,kBAAPP,CAAAA,OAAO,gDAAb","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { quiztype,Questiontype } from \"../QuizType/quiz_type\";\r\n\r\nlet shafalArray =(array: any[] )=>\r\n  [...array].sort(()=> Math.random() - 0.5)  \r\n\r\n\r\n\r\nexport const Service =  async (totalQuestion: number, level: string): Promise<quiztype[]>  =>{\r\n\r\n\r\n    let {data: res} = await axios.get(`https://opentdb.com/api.php?amount=${totalQuestion}&difficulty=${level}&type=multiple`);\r\n\r\n    let data = await res.results\r\n    \r\nconst quiz:quiztype[] = data.map((QuestionObj: Questiontype)=>{\r\n\r\n\r\n    return {\r\n      question: QuestionObj.question,\r\n      answer: QuestionObj.correct_answer,\r\n      correct_answer: QuestionObj.correct_answer,\r\n      option: shafalArray(QuestionObj.incorrect_answers.concat(QuestionObj.correct_answer))\r\n    }\r\n})\r\n\r\nreturn quiz\r\n\r\n}"]},"metadata":{},"sourceType":"module"}